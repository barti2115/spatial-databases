-- 1

-- create db
CREATE DATABASE postgis_raster;
CREATE EXTENSION postgis;
CREATE EXTENSION postgis_raster;

-- import data
pg_restore -p 5433 -U postgres -d postgis_raster postgis_raster.backup

-- creating schema
ALTER SCHEMA schema_name RENAME TO karpiuk;

-- raster2pgsql
raster2pgsql -s 3763 -N -32767 -t 128x128 -I -C -M -d Landsat8_L1TP_RGBN.tif  rasters.landsat8 | psql -d postgis_raster -U postgres -p 5433
raster2pgsql -s 3763 -N -32767 -t 100x100 -I -C -M -d srtm_1arc_v3.tif rasters.dem | psql -d postgis_raster -U postgres -p 5433

-- 2

-- 1st example
CREATE TABLE karpiuk.intersects AS
SELECT a.rast, b.municipality
FROM rasters.dem AS a, vectors.porto_parishes AS b
WHERE ST_Intersects(a.rast, b.geom) AND b.municipality ilike 'porto';

ALTER TABLE karpiuk.intersects
ADD column rid SERIAL PRIMARY KEY;

CREATE INDEX idx_intersects_rast_gist ON karpiuk.intersects
USING gist (ST_ConvexHull(rast));

SELECT AddRasterConstraints('karpiuk'::name, 'intersects'::name,'rast'::name);

-- 2nd example
CREATE TABLE karpiuk.clip AS
SELECT ST_Clip(a.rast, b.geom, true), b.municipality
FROM rasters.dem AS a, vectors.porto_parishes AS b
WHERE ST_Intersects(a.rast, b.geom) AND b.municipality like 'PORTO';

-- 3rd example
CREATE TABLE karpiuk.union AS
SELECT ST_Union(ST_Clip(a.rast, b.geom, true))
FROM rasters.dem AS a, vectors.porto_parishes AS b
WHERE b.municipality ilike 'porto' and ST_Intersects(b.geom,a.rast);

-- 3

-- 1st example
CREATE TABLE karpiuk.porto_parishes AS
WITH r AS (
    SELECT rast FROM rasters.dem
    LIMIT 1
)
SELECT ST_AsRaster(a.geom,r.rast,'8BUI',a.id,-32767) AS rast
FROM vectors.porto_parishes AS a, r
WHERE a.municipality ilike 'porto';

-- 2nd example
DROP TABLE karpiuk.porto_parishes;
CREATE TABLE karpiuk.porto_parishes AS
WITH r AS (
    SELECT rast FROM rasters.dem
    LIMIT 1
)
SELECT st_union(ST_AsRaster(a.geom,r.rast,'8BUI',a.id,-32767)) AS rast
FROM vectors.porto_parishes AS a, r
WHERE a.municipality ilike 'porto';

-- 3rd example
DROP TABLE karpiuk.porto_parishes; 
CREATE TABLE karpiuk.porto_parishes AS
WITH r AS (
    SELECT rast FROM rasters.dem
    LIMIT 1
)
SELECT st_tile(st_union(ST_AsRaster(a.geom,r.rast,'8BUI',a.id,-32767)),128,128,true,-32767) AS rast
FROM vectors.porto_parishes AS a, r
WHERE a.municipality ilike 'porto';

-- 4

-- 1st example
CREATE TABLE karpiuk.intersection as
SELECT
    a.rid,
    (ST_Intersection(b.geom,a.rast)).geom,
    (ST_Intersection(b.geom,a.rast)).val
FROM rasters.landsat8 AS a, vectors.porto_parishes AS b
WHERE b.parish ilike 'paranhos' and ST_Intersects(b.geom,a.rast);

-- 2nd example
CREATE TABLE karpiuk.dumppolygons AS
SELECT
    a.rid,
    (ST_DumpAsPolygons(ST_Clip(a.rast,b.geom))).geom,
    (ST_DumpAsPolygons(ST_Clip(a.rast,b.geom))).val
FROM rasters.landsat8 AS a, vectors.porto_parishes AS b
WHERE b.parish ilike 'paranhos' and ST_Intersects(b.geom,a.rast);

-- 5

-- 1st example
CREATE TABLE karpiuk.landsat_nir AS
SELECT rid, ST_Band(rast,4) AS rast
FROM rasters.landsat8;

-- 2nd example
CREATE TABLE karpiuk.paranhos_dem AS
SELECT a.rid,ST_Clip(a.rast, b.geom,true) as rast
FROM rasters.dem AS a, vectors.porto_parishes AS b
WHERE b.parish ilike 'paranhos' and ST_Intersects(b.geom,a.rast);

-- 3rd example
CREATE TABLE karpiuk.paranhos_slope AS
SELECT a.rid,ST_Slope(a.rast,1,'32BF','PERCENTAGE') as rast
FROM karpiuk.paranhos_dem AS a;

-- 4th example
CREATE TABLE karpiuk.paranhos_slope_reclass AS
SELECT a.rid,ST_Reclass(a.rast,1,']0-15]:1, (15-30]:2, (30-9999:3','32BF',0)
FROM karpiuk.paranhos_slope AS a;

-- 5th example
SELECT st_summarystats(a.rast) AS stats
FROM karpiuk.paranhos_dem AS a;

-- 6th example
SELECT st_summarystats(ST_Union(a.rast))
FROM karpiuk.paranhos_dem AS a;

-- 7th example
WITH t AS (
    SELECT st_summarystats(ST_Union(a.rast)) AS stats
    FROM karpiuk.paranhos_dem AS a
)
SELECT (stats).min,(stats).max,(stats).mean FROM t;

-- 8th example
WITH t AS (
    SELECT
        b.parish AS parish,
        st_summarystats(ST_Union(ST_Clip(a.rast,b.geom,true))) AS stats
    FROM rasters.dem AS a, vectors.porto_parishes AS b
    WHERE b.municipality ilike 'porto' and ST_Intersects(b.geom,a.rast)
    GROUP BY b.parish
)
SELECT parish,(stats).min,(stats).max,(stats).mean FROM t;

-- 9th example
SELECT b.name,st_value(a.rast,(ST_Dump(b.geom)).geom)
FROM rasters.dem a, vectors.places AS b
WHERE ST_Intersects(a.rast,b.geom)
ORDER BY b.name;

-- 10th example
CREATE TABLE karpiuk.tpi30 AS
SELECT ST_TPI(a.rast,1) AS rast
FROM rasters.dem a;

CREATE INDEX idx_tpi30_rast_gist ON karpiuk.tpi30
USING gist (ST_ConvexHull(rast));

SELECT AddRasterConstraints('karpiuk'::name,
'tpi30'::name,'rast'::name);

-- 6

-- 1st example
CREATE TABLE karpiuk.porto_ndvi AS
WITH r AS (
    SELECT a.rid,ST_Clip(a.rast, b.geom,true) AS rast
    FROM rasters.landsat8 AS a, vectors.porto_parishes AS b
WHERE b.municipality ilike 'porto' AND ST_Intersects(b.geom,a.rast)
)
SELECT
    r.rid,
    ST_MapAlgebra(
        r.rast, 1,
        r.rast, 4,
        '([rast2.val] - [rast1.val]) / ([rast2.val] + [rast1.val])::float','32BF'
    ) AS rast
FROM r;

CREATE INDEX idx_porto_ndvi_rast_gist ON karpiuk.porto_ndvi
USING gist (ST_ConvexHull(rast));

SELECT AddRasterConstraints('karpiuk'::name, 'porto_ndvi'::name,'rast'::name);

-- 2nd example
CREATE OR REPLACE FUNCTION karpiuk.ndvi(
value double precision [] [] [],
pos integer [][],
VARIADIC userargs text []
)
RETURNS double precision AS
$$
BEGIN
--RAISE NOTICE 'Pixel Value: %', value [1][1][1];-->For debug
purposes
RETURN (value [2][1][1] - value [1][1][1])/(value [2][1][1]+value
[1][1][1]); --> NDVI calculation!
END;
$$
LANGUAGE 'plpgsql' IMMUTABLE COST 1000;
CREATE TABLE karpiuk.porto_ndvi2 AS
WITH r AS (
SELECT a.rid,ST_Clip(a.rast, b.geom,true) AS rast
FROM rasters.landsat8 AS a, vectors.porto_parishes AS b
WHERE b.municipality ilike 'porto' and ST_Intersects(b.geom,a.rast)
)
SELECT
r.rid,ST_MapAlgebra(
r.rast, ARRAY[1,4],
'karpiuk.ndvi(double precision[],
integer[],text[])'::regprocedure, --> This is the function!
'32BF'::text
) AS rast
FROM r;

CREATE INDEX idx_porto_ndvi2_rast_gist ON karpiuk.porto_ndvi2
USING gist (ST_ConvexHull(rast));

SELECT AddRasterConstraints('karpiuk'::name,
'porto_ndvi2'::name,'rast'::name);

-- 7

-- 1st example
SELECT ST_AsTiff(ST_Union(rast))
FROM karpiuk.porto_ndvi;

-- 2nd example
SELECT ST_AsGDALRaster(ST_Union(rast), 'GTiff', ARRAY['COMPRESS=DEFLATE',
'PREDICTOR=2', 'PZLEVEL=9'])
FROM karpiuk.porto_ndvi;
CREATE TABLE tmp_out AS
SELECT lo_from_bytea(0,
ST_AsGDALRaster(ST_Union(rast), 'GTiff', ARRAY['COMPRESS=DEFLATE', 'PREDICTOR=2', 'PZLEVEL=9'])) AS loid
FROM karpiuk.porto_ndvi;

SELECT lo_export(loid, 'myraster.tiff')
FROM tmp_out;

SELECT lo_unlink(loid)
FROM tmp_out;

gdal_translate -co COMPRESS=DEFLATE -co PREDICTOR=2 -co ZLEVEL=9 PG:"host=localhost port=5433 dbname=postgis_raster user=postgres password=postgis schema=karpiuk table=porto_ndvi mode=2" porto_ndvi.tiff

CREATE TABLE karpiuk.tpi30_porto AS
SELECT ST_TPI(a.rast,1) as rast
FROM rasters.dem AS a, vectors.porto_parishes AS b
WHERE ST_Intersects(a.rast, b.geom) AND b.municipality ilike 'porto'

CREATE INDEX idx_tpi30_porto_rast_gist ON karpiuk.tpi30_porto
USING gist (ST_ConvexHull(rast));

SELECT AddRasterConstraints('karpiuk'::name,
'tpi30_porto'::name,'rast'::name);
